from typing import Any, Awaitable, Callable, TypeVar, Union

T = TypeVar("T")
R = TypeVar("R")
AsyncCallable = Callable[[T], Awaitable[R]]
SyncCallable = Callable[[T], R]
MaybeAsyncCallable = Union[SyncCallable, AsyncCallable]

def sync_to_async(
    fn: SyncCallable, thread_sensitive: Any = ...
) -> AsyncCallable: ...
def async_to_sync(fn: AsyncCallable) -> SyncCallable: ...
def any_to_async(
    fn: MaybeAsyncCallable, thread_sensitive: Any = ...
) -> AsyncCallable: ...
def any_to_sync(fn: MaybeAsyncCallable) -> SyncCallable: ...
